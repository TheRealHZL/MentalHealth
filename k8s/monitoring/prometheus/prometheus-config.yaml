apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: mentalhealth
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'mentalhealth-cluster'
        environment: 'production'

    # Alertmanager configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    # Load rules once and periodically evaluate them
    rule_files:
      - /etc/prometheus/rules/*.yml

    # Scrape configurations
    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']

      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      # PostgreSQL Exporter
      - job_name: 'postgresql'
        static_configs:
        - targets: ['postgresql-metrics:9187']
        relabel_configs:
        - source_labels: [__address__]
          target_label: instance
          replacement: 'postgresql'

      # Redis Exporter
      - job_name: 'redis'
        static_configs:
        - targets: ['redis-metrics:9121']
        relabel_configs:
        - source_labels: [__address__]
          target_label: instance
          replacement: 'redis'

      # NGINX Ingress Controller
      - job_name: 'nginx-ingress'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - ingress-nginx
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
          action: keep
          regex: ingress-nginx
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          action: keep
          regex: "10254"

  recording_rules.yml: |
    groups:
    - name: node_recording_rules
      interval: 10s
      rules:
      - record: instance:node_cpu_utilization:rate5m
        expr: 100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)
      - record: instance:node_memory_utilization:ratio
        expr: 1 - ((node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))

  alert_rules.yml: |
    groups:
    - name: targets
      rules:
      - alert: MonitorDown
        expr: up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Monitor {{ $labels.job }} down"
          description: "{{ $labels.job }} has been down for more than 2 minutes."

    - name: host_and_hardware
      rules:
      - alert: HighCPULoad
        expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode="idle"}[2m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU load on {{ $labels.instance }}"
          description: "CPU load is > 80%\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

      - alert: HighMemoryUsage
        expr: (1 - ((node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes))) * 100 > 85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on {{ $labels.instance }}"
          description: "Memory usage is > 85%\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

      - alert: OutOfDiskSpace
        expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"} * 100) < 10
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Out of disk space on {{ $labels.instance }}"
          description: "Disk is almost full (< 10% left)\n  VALUE = {{ $value }}\n  LABELS: {{ $labels }}"

    - name: postgresql
      rules:
      - alert: PostgresqlDown
        expr: pg_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL down on {{ $labels.instance }}"
          description: "PostgreSQL instance is down"

      - alert: PostgresqlTooManyConnections
        expr: sum by (instance) (pg_stat_activity_count) > 150
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL too many connections on {{ $labels.instance }}"
          description: "PostgreSQL has too many connections (> 150)\n  VALUE = {{ $value }}"

    - name: redis
      rules:
      - alert: RedisDown
        expr: redis_up == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Redis down on {{ $labels.instance }}"
          description: "Redis instance is down"

      - alert: RedisOutOfMemory
        expr: redis_memory_used_bytes / redis_memory_max_bytes * 100 > 90
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Redis out of memory on {{ $labels.instance }}"
          description: "Redis is running out of memory (> 90%)\n  VALUE = {{ $value }}"
